/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Dictionary } from "./Dictionary";
import { DictionaryCountArgs } from "./DictionaryCountArgs";
import { DictionaryFindManyArgs } from "./DictionaryFindManyArgs";
import { DictionaryFindUniqueArgs } from "./DictionaryFindUniqueArgs";
import { CreateDictionaryArgs } from "./CreateDictionaryArgs";
import { UpdateDictionaryArgs } from "./UpdateDictionaryArgs";
import { DeleteDictionaryArgs } from "./DeleteDictionaryArgs";
import { DictionaryService } from "../dictionary.service";
@graphql.Resolver(() => Dictionary)
export class DictionaryResolverBase {
  constructor(protected readonly service: DictionaryService) {}

  async _dictionariesMeta(
    @graphql.Args() args: DictionaryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Dictionary])
  async dictionaries(
    @graphql.Args() args: DictionaryFindManyArgs
  ): Promise<Dictionary[]> {
    return this.service.dictionaries(args);
  }

  @graphql.Query(() => Dictionary, { nullable: true })
  async dictionary(
    @graphql.Args() args: DictionaryFindUniqueArgs
  ): Promise<Dictionary | null> {
    const result = await this.service.dictionary(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Dictionary)
  async createDictionary(
    @graphql.Args() args: CreateDictionaryArgs
  ): Promise<Dictionary> {
    return await this.service.createDictionary({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Dictionary)
  async updateDictionary(
    @graphql.Args() args: UpdateDictionaryArgs
  ): Promise<Dictionary | null> {
    try {
      return await this.service.updateDictionary({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dictionary)
  async deleteDictionary(
    @graphql.Args() args: DeleteDictionaryArgs
  ): Promise<Dictionary | null> {
    try {
      return await this.service.deleteDictionary(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
