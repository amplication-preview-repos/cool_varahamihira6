/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Dictionary as PrismaDictionary } from "@prisma/client";

export class DictionaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DictionaryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dictionary.count(args);
  }

  async dictionaries(
    args: Prisma.DictionaryFindManyArgs
  ): Promise<PrismaDictionary[]> {
    return this.prisma.dictionary.findMany(args);
  }
  async dictionary(
    args: Prisma.DictionaryFindUniqueArgs
  ): Promise<PrismaDictionary | null> {
    return this.prisma.dictionary.findUnique(args);
  }
  async createDictionary(
    args: Prisma.DictionaryCreateArgs
  ): Promise<PrismaDictionary> {
    return this.prisma.dictionary.create(args);
  }
  async updateDictionary(
    args: Prisma.DictionaryUpdateArgs
  ): Promise<PrismaDictionary> {
    return this.prisma.dictionary.update(args);
  }
  async deleteDictionary(
    args: Prisma.DictionaryDeleteArgs
  ): Promise<PrismaDictionary> {
    return this.prisma.dictionary.delete(args);
  }
}
