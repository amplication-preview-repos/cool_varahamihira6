/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DictionaryService } from "../dictionary.service";
import { DictionaryCreateInput } from "./DictionaryCreateInput";
import { Dictionary } from "./Dictionary";
import { DictionaryFindManyArgs } from "./DictionaryFindManyArgs";
import { DictionaryWhereUniqueInput } from "./DictionaryWhereUniqueInput";
import { DictionaryUpdateInput } from "./DictionaryUpdateInput";

export class DictionaryControllerBase {
  constructor(protected readonly service: DictionaryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dictionary })
  async createDictionary(
    @common.Body() data: DictionaryCreateInput
  ): Promise<Dictionary> {
    return await this.service.createDictionary({
      data: data,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dictionary] })
  @ApiNestedQuery(DictionaryFindManyArgs)
  async dictionaries(@common.Req() request: Request): Promise<Dictionary[]> {
    const args = plainToClass(DictionaryFindManyArgs, request.query);
    return this.service.dictionaries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dictionary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dictionary(
    @common.Param() params: DictionaryWhereUniqueInput
  ): Promise<Dictionary | null> {
    const result = await this.service.dictionary({
      where: params,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dictionary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDictionary(
    @common.Param() params: DictionaryWhereUniqueInput,
    @common.Body() data: DictionaryUpdateInput
  ): Promise<Dictionary | null> {
    try {
      return await this.service.updateDictionary({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dictionary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDictionary(
    @common.Param() params: DictionaryWhereUniqueInput
  ): Promise<Dictionary | null> {
    try {
      return await this.service.deleteDictionary({
        where: params,
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
